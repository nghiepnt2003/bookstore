const Cart = require("../models/Cart");
const Member = require("../models/Member");
const User = require("../models/User");
const { multipleMongooseToObject } = require("../../util/mongoose");
const asyncHandler = require("express-async-handler");
const cloudinary = require("cloudinary").v2;
const Cloud = require("../../config/cloud/cloudinary.config");

var jwt = require("jsonwebtoken");
var fs = require("fs");
const crypto = require("crypto");

const { checkDocumentById } = require("../middlewares/checkDocumentMiddleware");
const {
  generateAccessToken,
  generateRefreshToken,
} = require("../middlewares/jwt");
const sendMail = require("../../util/sendMail");
const { saveOTP } = require("../models/Otp");
const Product = require("../models/Product");
const { OAuth2Client } = require("google-auth-library");
const client = new OAuth2Client(process.env.YOUR_GOOGLE_CLIENT_ID); // Client ID t·ª´ Google API

class UserService {
  // L·∫•y th√¥ng tin ng∆∞·ªùi d√πng theo ID
  async getUserById(userId) {
    try {
      const user = await User.findOne({ _id: userId }).select(
        "-refreshToken -password"
      );
      return user;
    } catch (error) {
      throw new Error("Error fetching user: " + error.message);
    }
  }

  // T√¨m ki·∫øm ng∆∞·ªùi d√πng v·ªõi c√°c ƒëi·ªÅu ki·ªán v√† ph√¢n trang
  async getAllUsers(queries) {
    try {
      // T√°ch c√°c tr∆∞·ªùng ƒë·∫∑c bi·ªát ra kh·ªèi query
      const queryCopy = { ...queries };
      const excludeFields = ["limit", "sort", "page", "fields"];
      excludeFields.forEach((el) => delete queryCopy[el]);

      // Format l·∫°i c√°c operators cho ƒë√∫ng c√∫ ph√°p mongoose
      let queryString = JSON.stringify(queryCopy);
      queryString = queryString.replace(
        /\b(gte|gt|lt|lte)\b/g,
        (matchedEl) => `$${matchedEl}`
      );
      const formatedQueries = JSON.parse(queryString);

      // Filtering
      if (queries?.username) {
        formatedQueries.username = { $regex: queries.username, $options: "i" };
      }
      if (queries?.email) {
        formatedQueries.email = { $regex: queries.email, $options: "i" };
      }
      if (queries?.fullname) {
        formatedQueries.fullname = { $regex: queries.fullname, $options: "i" };
      }

      // Execute query with populate
      let queryCommand = User.find(formatedQueries).populate({
        path: "wishList", // Populate tr∆∞·ªùng wishList
        select: "name image price author publisher categories", // Ch·ªâ l·∫•y nh·ªØng tr∆∞·ªùng c·∫ßn thi·∫øt
        populate: [
          { path: "author", select: "name" }, // Populate th√™m c√°c tr∆∞·ªùng li√™n quan nh∆∞ author
          { path: "publisher", select: "name" }, // Populate th√™m tr∆∞·ªùng publisher
          { path: "categories", select: "name" }, // Populate th√™m categories
        ],
      });

      // Sorting
      if (queries.sort) {
        const sortBy = queries.sort.split(",").join(" ");
        queryCommand = queryCommand.sort(sortBy);
      }

      // Fields limiting
      if (queries.fields) {
        const fields = queries.fields.split(",").join(" ");
        queryCommand = queryCommand.select(fields);
      }

      // Pagination
      const page = +queries.page || 1;
      const limit = +queries.limit || process.env.LIMIT_USERS;
      const skip = (page - 1) * limit;
      queryCommand.skip(skip).limit(limit).select("-refreshToken -password");

      // L·∫•y danh s√°ch ng∆∞·ªùi d√πng
      const users = await queryCommand.exec();

      // L·∫•y t·ªïng s·ªë ng∆∞·ªùi d√πng
      const counts = await User.find(formatedQueries).countDocuments();

      return { users, counts };
    } catch (error) {
      throw new Error("Error fetching users: " + error.message);
    }
  }
  // T√¨m ng∆∞·ªùi d√πng theo ID v√† l·∫•y danh s√°ch bookmark
  async getBookmarksByUserId(userId) {
    try {
      const user = await User.findById(userId).populate("bookmarks");
      if (!user) {
        throw new Error("User not found");
      }
      return user.bookmarks;
    } catch (error) {
      throw new Error("Error fetching bookmarks: " + error.message);
    }
  }

  // T·∫°o s·ªë ƒëi·ªán tho·∫°i ng·∫´u nhi√™n v√† ki·ªÉm tra t√≠nh duy nh·∫•t
  async generateRandomPhoneNumber() {
    let phoneNumber;
    let phoneExists = true;

    // L·∫∑p l·∫°i vi·ªác t·∫°o s·ªë ƒëi·ªán tho·∫°i cho ƒë·∫øn khi s·ªë n√†y l√† duy nh·∫•t
    while (phoneExists) {
      phoneNumber = `0${Math.floor(100000000 + Math.random() * 90000000)}`; // T·∫°o chu·ªói 10 s·ªë b·∫Øt ƒë·∫ßu b·∫±ng 0
      phoneExists = await User.findOne({ phone: phoneNumber }); // Ki·ªÉm tra xem s·ªë n√†y ƒë√£ t·ªìn t·∫°i ch∆∞a
    }

    return phoneNumber;
  }
  // ƒêƒÉng nh·∫≠p v·ªõi Google v√† t·∫°o ng∆∞·ªùi d√πng m·ªõi n·∫øu ch∆∞a c√≥
  async loginWithGoogle(userInfo) {
    const email = userInfo.email;
    let user = await User.findOne({ email });

    if (!user) {
      // Upload ·∫£nh ƒë·∫°i di·ªán c·ªßa Google l√™n Cloudinary
      let imageUrl = null;
      if (userInfo.picture) {
        const uploadedImage = await cloudinary.uploader.upload(
          userInfo.picture,
          {
            folder: "bookstore",
          }
        );
        imageUrl = uploadedImage.secure_url; // URL ·∫£nh sau khi upload l√™n Cloudinary
      }

      // T·∫°o s·ªë ƒëi·ªán tho·∫°i ng·∫´u nhi√™n cho user
      const randomPhone = await this.generateRandomPhoneNumber();

      // T·∫°o m·ªõi ng∆∞·ªùi d√πng
      const newUser = new User({
        username: email.split("@")[0], // D√πng ph·∫ßn ƒë·∫ßu c·ªßa email l√†m username
        fullname: userInfo.name,
        email,
        image: imageUrl,
        phone: randomPhone,
        password: userInfo._id, // Google login kh√¥ng c·∫ßn m·∫≠t kh·∫©u
        role: 2, // G√°n vai tr√≤ m·∫∑c ƒë·ªãnh (n·∫øu c√≥)
      });

      const savedUser = await newUser.save();

      // T·∫°o m·ªõi gi·ªè h√†ng cho ng∆∞·ªùi d√πng
      const newCart = new Cart({ user: savedUser._id, items: [] });
      const savedCart = await newCart.save();
      savedUser.cart = savedCart._id;

      // T·∫°o m·ªõi member cho ng∆∞·ªùi d√πng
      const newMember = new Member({ score: 0, rank: "Bronze" });
      const savedMember = await newMember.save();
      savedUser.member = savedMember._id; // Li√™n k·∫øt member v·ªõi user

      // L∆∞u user m·ªõi v√†o database
      user = await savedUser.save();
    }

    return user;
  }

  // ƒêƒÉng k√Ω ng∆∞·ªùi d√πng m·ªõi
  async register(userData) {
    const { username, password, fullname, email, phone, address, image } =
      userData;

    // Ki·ªÉm tra c√°c tr∆∞·ªùng b·∫Øt bu·ªôc
    if (!username || !password || !fullname || !email || !phone) {
      throw new Error("Missing inputs");
    }

    // Ki·ªÉm tra xem username ƒë√£ t·ªìn t·∫°i ch∆∞a
    const existingUser = await User.findOne({ username });
    if (existingUser) {
      throw new Error("Username already exists.");
    }

    let imageUrl = null;
    // N·∫øu c√≥ ·∫£nh ƒë·∫°i di·ªán, upload l√™n Cloudinary
    if (image) {
      const uploadedImage = await cloudinary.uploader.upload(image, {
        folder: "bookstore",
      });
      imageUrl = uploadedImage.secure_url;
    }

    // T·∫°o m·ªõi ng∆∞·ªùi d√πng
    const user = new User({ ...userData, image: imageUrl || userData.image });
    const savedUser = await user.save();

    // T·∫°o gi·ªè h√†ng cho ng∆∞·ªùi d√πng
    const newCart = new Cart({ user: savedUser._id, items: [] });
    const savedCart = await newCart.save();
    savedUser.cart = savedCart._id;

    // T·∫°o th√†nh vi√™n cho ng∆∞·ªùi d√πng
    const newMember = new Member({ score: 0, rank: "Bronze" });
    const savedMember = await newMember.save();
    savedUser.member = savedMember._id;

    // L∆∞u ng∆∞·ªùi d√πng v√† th√¥ng tin li√™n k·∫øt
    await savedUser.save();

    // G·ª≠i email x√°c nh·∫≠n
    const html = `<!DOCTYPE html>
      <html lang="vi">
        <head>
          <meta charset="UTF-8">
          <meta name="viewport" content="width=device-width, initial-scale=1.0">
          <title>X√°c nh·∫≠n OTP</title>
          <style>
            body { font-family: Arial, sans-serif; font-size: 14px; color: #333333; margin: 0; padding: 0; }
            .container { max-width: 600px; margin: 0 auto; border: 5px solid #39c6b9; border-radius: 10px; }
            .content { padding: 20px; }
            h1 { color: #39c6b9; }
            p { line-height: 1.5; }
            a { color: #0099ff; text-decoration: none; }
          </style>
        </head>
        <body>
          <div class="container">
            <div class="content">
              <h1>Book Store</h1>
              <p>Xin ch√†o!</p>
              <p>Ch√∫ng t√¥i r·∫•t vui m·ª´ng th√¥ng b√°o r·∫±ng t√†i kho·∫£n c·ªßa b·∫°n t·∫°i Bookstore ƒë√£ ƒë∆∞·ª£c ƒëƒÉng k√Ω th√†nh c√¥ng! üéâ</p>
              <p>Ch√∫c b·∫°n c√≥ nh·ªØng tr·∫£i nghi·ªám tuy·ªát v·ªùi t·∫°i Bookstore</p>
              <p>Tr√¢n tr·ªçng,</p>
              <p>Book Store</p>
            </div>
          </div>
        </body>
      </html>`;

    const data = { email, html };
    await sendMail("Create account successfully", data);

    return savedUser;
  }

  // c·∫≠p nh·∫≠t user
  async updateUser(_id, body, file) {
    const existingUser = await User.findById(_id);
    if (!existingUser) {
      throw new Error("User not found");
    }

    // X·ª≠ l√Ω x√≥a ·∫£nh c≈© n·∫øu c√≥ ·∫£nh m·ªõi ƒë∆∞·ª£c upload
    let newImageUrl = null;

    // N·∫øu c√≥ ·∫£nh m·ªõi ƒë∆∞·ª£c upload, l∆∞u URL v√†o body
    if (file) {
      newImageUrl = file.path; // L∆∞u URL c·ªßa ·∫£nh m·ªõi
      body.image = newImageUrl; // C·∫≠p nh·∫≠t URL ·∫£nh m·ªõi v√†o body
    }
    if (!_id || Object.keys(body).length === 0) {
      throw new Error("Missing inputs");
    }
    let updatedUser = null;
    try {
      // C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng
      updatedUser = await User.findByIdAndUpdate(_id, body, {
        new: true,
        runValidators: true,
      })
        .select("-password -role -refreshToken")
        .populate({
          path: "wishList",
          populate: {
            path: "author publisher categories", // N·∫øu b·∫°n mu·ªën l·∫•y c·∫£ th√¥ng tin c·ªßa author, publisher, categories
          },
        });
      // N·∫øu c√≥ ·∫£nh c≈©, x√≥a ·∫£nh c≈© tr√™n Cloudinary sau khi c·∫≠p nh·∫≠t th√†nh c√¥ng
      if (existingUser.image && existingUser.image !== newImageUrl) {
        const publicId = existingUser.image.split("/").pop().split(".")[0];
        await cloudinary.uploader.destroy(`bookstore/${publicId}`);
      }
    } catch (error) {
      // N·∫øu c√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh c·∫≠p nh·∫≠t, x√≥a ·∫£nh m·ªõi tr√™n Cloudinary
      if (newImageUrl) {
        const publicId = newImageUrl.split("/").pop().split(".")[0];
        await cloudinary.uploader.destroy(`bookstore/${publicId}`);
      }
      throw new Error(error);
    }
    return updatedUser;
  }
  // c·∫≠p nh·∫≠t user b·ªüi admin
  async updateUserByAdmin(_id, body, file) {
    const existingUser = await User.findById(_id);
    if (!existingUser) {
      throw new Error("User not found");
    }

    let newImageUrl = null;

    // N·∫øu c√≥ ·∫£nh m·ªõi ƒë∆∞·ª£c upload, l∆∞u URL v√†o body
    if (file) {
      newImageUrl = file.path; // L∆∞u URL c·ªßa ·∫£nh m·ªõi
      body.image = newImageUrl; // C·∫≠p nh·∫≠t URL ·∫£nh m·ªõi v√†o body
    }
    // Ki·ªÉm tra n·∫øu kh√¥ng c√≥ _id ho·∫∑c kh√¥ng c√≥ d·ªØ li·ªáu
    if (!_id || Object.keys(body).length === 0) {
      throw new Error("Missing inputs");
    }
    // C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng
    let updatedUser = null;
    try {
      updatedUser = await User.findByIdAndUpdate(_id, body, {
        new: true,
        runValidators: true, // Ki·ªÉm tra validation tr∆∞·ªõc khi c·∫≠p nh·∫≠t
      })
        .select("-password -role -refreshToken")
        .populate({
          path: "wishList",
          populate: {
            path: "author publisher categories",
          },
        });
      // N·∫øu c√≥ ·∫£nh c≈©, x√≥a ·∫£nh c≈© tr√™n Cloudinary sau khi c·∫≠p nh·∫≠t th√†nh c√¥ng
      if (existingUser.image && existingUser.image !== newImageUrl) {
        const publicId = existingUser.image.split("/").pop().split(".")[0];
        await cloudinary.uploader.destroy(`bookstore/${publicId}`);
      }
    } catch (error) {
      // N·∫øu c√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh c·∫≠p nh·∫≠t, x√≥a ·∫£nh m·ªõi tr√™n Cloudinary

      if (newImageUrl) {
        const publicId = newImageUrl.split("/").pop().split(".")[0];
        await cloudinary.uploader.destroy(`bookstore/${publicId}`);
      }
      throw new Error(error);
    }

    return updatedUser;
  }

  async deleteUserById(req) {
    try {
      const { id } = req.params;

      // Ki·ªÉm tra xem User c√≥ t·ªìn t·∫°i kh√¥ng
      const check = await checkDocumentById(User, id);
      if (!check.exists) {
        return {
          status: 400,
          response: {
            success: false,
            message: check.message,
          },
        };
      }

      const user = await User.findById(id);

      // Ki·ªÉm tra xem User c√≥ isBlocked l√† true kh√¥ng
      if (!user.isBlocked) {
        return {
          status: 403,
          response: {
            success: false,
            message: "User is not blocked and cannot be deleted",
          },
        };
      }

      // X√≥a Cart li√™n quan ƒë·∫øn User tr∆∞·ªõc khi x√≥a User
      await Cart.delete({ user: id });

      // X√≥a User
      await User.delete({ _id: id });

      return {
        status: 200,
        response: {
          success: true,
          message: "Delete successful",
        },
      };
    } catch (error) {
      console.error(error);
      throw new Error("An error occurred while deleting the user");
    }
  }

  async removeFromWishlist(req) {
    try {
      const { _id } = req.user; // L·∫•y ID c·ªßa user t·ª´ token
      const productId = req.params.productId; // L·∫•y productId t·ª´ URL

      // L·∫•y th√¥ng tin user
      const user = await User.findById(_id);
      if (!user) {
        return {
          status: 404,
          response: {
            success: false,
            message: "User not found",
          },
        };
      }

      // Kh·ªüi t·∫°o wishlist n·∫øu ch∆∞a t·ªìn t·∫°i
      if (!Array.isArray(user.wishList)) {
        user.wishList = [];
      }

      // Ki·ªÉm tra xem s·∫£n ph·∫©m c√≥ trong wishlist kh√¥ng
      const index = user.wishList.indexOf(productId);
      if (index === -1) {
        return {
          status: 400,
          response: {
            success: false,
            message: "Product not found in wishList",
          },
        };
      }

      // X√≥a s·∫£n ph·∫©m kh·ªèi wishlist
      user.wishList.splice(index, 1);
      await user.save();

      return {
        status: 200,
        response: {
          success: true,
          message: "Product removed from wishlist",
          wishList: user.wishList, // Tr·∫£ v·ªÅ wishlist sau khi x√≥a
        },
      };
    } catch (error) {
      console.error(error);
      throw new Error(
        "An error occurred while removing the product from wishlist"
      );
    }
  }

  async forceDelete(req) {
    try {
      const { id } = req.params;

      // X√≥a Cart li√™n quan ƒë·∫øn user
      await Cart.deleteOne({ user: id });

      // X√≥a User
      await User.deleteOne({ _id: id });

      return {
        status: 200,
        response: {
          success: true,
          message: "Delete Force successful",
        },
      };
    } catch (error) {
      console.error(error);
      throw new Error("An error occurred while performing force delete");
    }
  }

  async restoreUserAndCart(id) {
    try {
      // Kh√¥i ph·ª•c ng∆∞·ªùi d√πng v√† gi·ªè h√†ng
      await User.restore({ _id: id });
      await Cart.restore({ _id: id });

      // T√¨m l·∫°i ng∆∞·ªùi d√πng sau khi kh√¥i ph·ª•c
      const restoredUser = await User.findById(id);
      if (!restoredUser) {
        throw new Error("User not found");
      }

      return restoredUser;
    } catch (error) {
      throw error; // Propagate error to be handled by controller
    }
  }

  // X·ª≠ l√Ω block/unblock user
  async blockUser(id, isBlocked) {
    try {
      // Ki·ªÉm tra user c√≥ t·ªìn t·∫°i kh√¥ng
      const user = await User.findById(id).select(
        "-password -refreshToken -role"
      );
      if (!user) {
        throw new Error("User not found");
      }

      // Ki·ªÉm tra n·∫øu l√† admin th√¨ kh√¥ng th·ªÉ block/unblock
      if (user.role === 1) {
        throw new Error("Cannot block an admin user");
      }

      // C·∫≠p nh·∫≠t tr·∫°ng th√°i block c·ªßa user
      user.isBlocked = isBlocked ? isBlocked : false;
      await user.save();

      return user;
    } catch (error) {
      throw new Error(error.message || "Error blocking user");
    }
  }

  // Login
  async login(username, password) {
    try {
      const user = await User.findOne({ username });

      if (!user) {
        throw new Error("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng");
      }

      // Ki·ªÉm tra ng∆∞·ªùi d√πng c√≥ b·ªã ch·∫∑n kh√¥ng
      if (user.isBlocked) {
        throw new Error("Ng∆∞·ªùi d√πng ƒë√£ b·ªã ch·∫∑n. Truy c·∫≠p b·ªã t·ª´ ch·ªëi.");
      }

      // Ki·ªÉm tra m·∫≠t kh·∫©u
      const isPasswordCorrect = await user.isCorrectPassword(password);
      if (!isPasswordCorrect) {
        throw new Error("M·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c");
      }

      // T·∫°o token
      const accessToken = generateAccessToken(user._id, user.role);
      const refreshToken = generateRefreshToken(user._id);

      // C·∫≠p nh·∫≠t refreshToken v√†o database
      await User.findByIdAndUpdate(user._id, { refreshToken }, { new: true });

      return { accessToken, refreshToken, user };
    } catch (error) {
      throw error; // Propagate error to be handled by controller
    }
  }

  // Current
  async getCurrentUser(userId) {
    try {
      const user = await User.findById(userId).select(
        "-refreshToken -password -role"
      );
      return user; // Tr·∫£ v·ªÅ user n·∫øu t√¨m th·∫•y
    } catch (error) {
      throw new Error("Error retrieving user");
    }
  }

  // H√†m l√†m m·ªõi access token t·ª´ refresh token
  async refreshAccessToken(refreshToken) {
    try {
      // ƒê·ªçc public key t·ª´ file
      var cert = fs.readFileSync("../key/publickey.crt");

      // X√°c minh refresh token
      const decoded = jwt.verify(refreshToken, cert, { algorithms: ["RS256"] });

      // T√¨m user trong c∆° s·ªü d·ªØ li·ªáu d·ª±a tr√™n _id v√† refreshToken
      const user = await User.findOne({ _id: decoded._id, refreshToken });

      if (!user) {
        throw new Error("Refresh token not matched");
      }

      // T·∫°o m·ªõi access token
      const newAccessToken = generateAccessToken(user._id, user.role);

      return { success: true, newAccessToken }; // Tr·∫£ v·ªÅ access token m·ªõi
    } catch (err) {
      throw new Error("Invalid or expired refresh token");
    }
  }

  async logout(refreshToken) {
    try {
      // X√≥a refreshToken trong c∆° s·ªü d·ªØ li·ªáu
      const user = await User.findOneAndUpdate(
        { refreshToken },
        { refreshToken: "" },
        { new: true }
      );

      if (!user) {
        throw new Error("Refresh token not matched in database");
      }

      return { success: true }; // Tr·∫£ v·ªÅ k·∫øt qu·∫£ th√†nh c√¥ng
    } catch (error) {
      throw new Error("Logout failed");
    }
  }

  // X·ª≠ l√Ω qu√™n m·∫≠t kh·∫©u
  async forgotPassword(email) {
    try {
      const user = await User.findOne({ email });
      if (!user) {
        throw new Error("User not found with this email");
      }

      // T·∫°o token thay ƒë·ªïi m·∫≠t kh·∫©u
      const resetToken = user.createPasswordChangeToken();
      await user.save();

      // T·∫°o email HTML
      const html = `<!DOCTYPE html>
        <html lang="vi">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>X√°c nh·∫≠n thay ƒë·ªïi m·∫≠t kh·∫©u</title>
            <style>
                body {
                    font-family: Arial, sans-serif;
                    font-size: 14px;
                    color: #333333;
                    margin: 0;
                    padding: 0;
                }
                .container {
                    max-width: 600px;
                    margin: 0 auto;
                    border: 5px solid #39c6b9;
                    border-radius: 10px;
                }
                .content {
                    padding: 20px;
                }
                h1 {
                    color: #39c6b9;
                }
                p {
                    line-height: 1.5;
                }
                a {
                    color: #0099ff;
                    text-decoration: none;
                }
            </style>
        </head>
        <body>
            <div class="container">
                <div class="content">
                    <h1>Book Store</h1>
                    <p>Xin ch√†o, <span style="font-weight: bold;">${user?.username}</span>!</p>
                    <p>Xin vui l√≤ng click v√†o ƒë∆∞·ªùng link d∆∞·ªõi ƒë√¢y ƒë·ªÉ thay ƒë·ªïi m·∫≠t kh·∫©u c·ªßa b·∫°n.</p>
                    <p>Link n√†y s·∫Ω h·∫øt h·∫°n sau 15 ph√∫t k·ªÉ t·ª´ b√¢y gi·ªù. </p>
                    <strong style="color: #da4f25;">
                      <a href="${process.env.URL_CLIENT}/reset-password/${resetToken}">Click here</a>
                    </strong>
                    <p>C·∫£m ∆°n b·∫°n ƒë√£ tin t∆∞·ªüng s·ª≠ d·ª•ng web c·ªßa ch√∫ng t√¥i!</p>
                    <p>Tr√¢n tr·ªçng,</p>
                    <p>Book Store</p>
                </div>
            </div>
        </body>
        </html>`;

      // G·ª≠i email v·ªõi n·ªôi dung ƒë√£ t·∫°o
      const data = { email, html };
      await sendMail("ForgotPassword", data);

      return {
        success: true,
        message: "Password reset email sent successfully",
      };
    } catch (error) {
      throw new Error("Error processing password reset: " + error.message);
    }
  }

  // X·ª≠ l√Ω g·ª≠i OTP t·∫°o t√†i kho·∫£n
  async sendOTPCreateAccount(email) {
    try {
      // Ki·ªÉm tra n·∫øu email ƒë√£ t·ªìn t·∫°i trong h·ªá th·ªëng
      let user = await User.findOne({ email });
      if (user) {
        throw new Error("User with this email already exists");
      }

      // T·∫°o m√£ OTP ng·∫´u nhi√™n
      let otp_code = Math.floor(100000 + Math.random() * 900000).toString();

      // L∆∞u OTP v√†o c∆° s·ªü d·ªØ li·ªáu
      await saveOTP(email, otp_code);

      // T·∫°o n·ªôi dung email
      const html = `<!DOCTYPE html>
        <html lang="vi">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>X√°c nh·∫≠n OTP</title>
            <style>
                body {
                    font-family: Arial, sans-serif;
                    font-size: 14px;
                    color: #333333;
                    margin: 0;
                    padding: 0;
                }
                .container {
                    max-width: 600px;
                    margin: 0 auto;
                    border: 5px solid #39c6b9;
                    border-radius: 10px;
                }
                .content {
                    padding: 20px;
                }
                h1 {
                    color: #39c6b9;
                }
                p {
                    line-height: 1.5;
                }
                a {
                    color: #0099ff;
                    text-decoration: none;
                }
            </style>
        </head>
        <body>
            <div class="container">
                <div class="content">
                    <h1>Book Store</h1>
                    <p>Xin ch√†o,</p>
                    <p>ƒê√¢y l√† m√£ OTP ƒë·ªÉ t·∫°o t√†i kho·∫£n c·ªßa b·∫°n.</p>
                    <strong style="color: #da4f25;">OTP : ${otp_code}</strong>
                    <p>C·∫£m ∆°n b·∫°n ƒë√£ tin t∆∞·ªüng s·ª≠ d·ª•ng web c·ªßa ch√∫ng t√¥i!</p>
                    <p>Tr√¢n tr·ªçng,</p>
                    <p>Book Store</p>
                </div>
            </div>
        </body>
        </html>`;

      // G·ª≠i email ch·ª©a m√£ OTP
      const data = { email, html };
      const result = await sendMail("Create Account", data);
      if (!result) {
        throw new Error("Failed to send OTP email.");
      }

      return { success: true, message: "OTP sent successfully." };
    } catch (error) {
      throw new Error(error.message || "Error processing OTP creation");
    }
  }

  // X·ª≠ l√Ω reset password
  // Khi ng∆∞·ªùi d√πng qu√™n pass
  async resetPassword(resetToken, newPassword) {
    try {
      // M√£ h√≥a resetToken b·∫±ng sha256 ƒë·ªÉ t√¨m ki·∫øm trong DB
      const passwordResetToken = crypto
        .createHash("sha256")
        .update(resetToken)
        .digest("hex");

      // T√¨m ng∆∞·ªùi d√πng v·ªõi token h·ª£p l·ªá v√† token ch∆∞a h·∫øt h·∫°n
      const user = await User.findOne({
        passwordResetToken,
        passwordResetExpires: { $gt: Date.now() }, // Ki·ªÉm tra token ch∆∞a h·∫øt h·∫°n
      });

      if (!user) {
        throw new Error("Invalid or expired reset token");
      }

      // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u m·ªõi
      user.password = newPassword;
      user.passwordChangedAt = Date.now(); // L∆∞u th·ªùi gian thay ƒë·ªïi m·∫≠t kh·∫©u
      user.passwordResetExpires = undefined; // X√≥a th·ªùi gian h·∫øt h·∫°n c·ªßa token
      user.passwordResetToken = undefined; // X√≥a token reset password

      await user.save(); // L∆∞u l·∫°i th√¥ng tin ng∆∞·ªùi d√πng v·ªõi m·∫≠t kh·∫©u m·ªõi

      return user; // Tr·∫£ v·ªÅ ng∆∞·ªùi d√πng sau khi c·∫≠p nh·∫≠t
    } catch (error) {
      throw new Error(error.message || "Error resetting password");
    }
  }

  // X·ª≠ l√Ω thay ƒë·ªïi m·∫≠t kh·∫©u
  async changePassword(userId, oldPassword, newPassword) {
    try {
      const user = await User.findById(userId);
      if (!user) {
        throw new Error("User not found");
      }

      // Ki·ªÉm tra m·∫≠t kh·∫©u c≈©
      const isCorrectOldPassword = await user.isCorrectPassword(oldPassword);
      if (!isCorrectOldPassword) {
        throw new Error("Incorrect old password");
      }

      // Ki·ªÉm tra m·∫≠t kh·∫©u m·ªõi c√≥ gi·ªëng m·∫≠t kh·∫©u c≈© kh√¥ng
      const isSameAsOldPassword = await user.isCorrectPassword(newPassword);
      if (isSameAsOldPassword) {
        throw new Error("New password cannot be the same as the old password");
      }

      // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u m·ªõi
      user.password = newPassword;
      user.passwordChangedAt = Date.now();
      await user.save();

      return user; // Tr·∫£ v·ªÅ ng∆∞·ªùi d√πng sau khi c·∫≠p nh·∫≠t
    } catch (error) {
      throw new Error(error.message || "Error changing password");
    }
  }
}

module.exports = new UserService();
